{
	"name": "UpdateProduct",
	"properties": {
		"folder": {
			"name": "Chapter 7"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "SqlDynamics",
						"type": "DatasetReference"
					},
					"name": "Products"
				},
				{
					"dataset": {
						"referenceName": "SqlDynamics",
						"type": "DatasetReference"
					},
					"name": "Sales"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "derivedProductsFeatures"
				},
				{
					"name": "EliminatedDuplicates"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Product as string,",
				"          ProductName as string,",
				"          WeightInOunces as decimal(19,2),",
				"          WeightInGrams as decimal(19,2)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> Products",
				"source(output(",
				"          RowId as integer,",
				"          Retailer as string,",
				"          SalesMonth as date,",
				"          Product as string,",
				"          SalesValueUSD as decimal(19,2),",
				"          UnitsSold as integer,",
				"          RunSeqNo as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> Sales",
				"Sales derive(ProductName = trim(left(Product,length(Product)-length(:WeightString))),",
				"          WeightInOunces = round(toFloat(replace(:WeightString,:WeightUnit,''))/iif(:WeightUnit=='g',28.3495,1.0),2),",
				"          WeightInGrams = round(toFloat(replace(:WeightString,:WeightUnit,''))/iif(:WeightUnit=='oz',0.0352,1.0)),",
				"          WeightString := right(Product,locate(' ',reverse(Product))-1),",
				"          WeightUnit := iif(endsWith(Product,'oz'),'oz','g')) ~> derivedProductsFeatures",
				"derivedProductsFeatures aggregate(groupBy(ProductName = first(ProductName)),",
				"     ProductNames = first(ProductName),",
				"          each(match(startsWith(name, 'Weight')), $$ = first($$))) ~> EliminatedDuplicates"
			]
		}
	}
}